A. Even Subset Sum Problem
time limit per test1 second
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given an array a consisting of n positive integers. 

Find a non-empty subset of its elements such that their sum is even (i.e. divisible by 2) or determine that there is no such subset.

Both the given array and required subset may contain equal values.

Input
The first line contains a single integer t (1≤t≤100), number of test cases to solve. 

Descriptions of t test cases follow.

A description of each test case consists of two lines. 

The first line contains a single integer n (1≤n≤100), length of array a.

The second line contains n integers a1,a2,…,an (1≤ai≤100), elements of a. 

The given array a can contain equal values (duplicates).

Output
For each test case output −1 if there is no such subset of elements. 

Otherwise output positive integer k, number of elements in the required subset. Then output k distinct integers (1≤pi≤n), indexes of the chosen elements. If there are multiple solutions output any of them.

Example
inputCopy
3
3
1 4 3
1
15
2
3 5
outputCopy
1
2
-1
2
1 2
Note
There are three test cases in the example.

In the first test case, you can choose the subset consisting of only the second element. 

Its sum is 4 and it is even.

In the second test case, there is only one non-empty subset of elements consisting of the first element, however sum in it is odd, so there is no solution.

In the third test case, the subset consisting of all array's elements has even sum.



思路：模拟
先对应输入数值存数组
先判断数组值1个的情况，一次返回-1或1 1（WA点：长度为1也可能是偶数，忘判断了...）
然后遍历数组，遇见奇数就下标入数组，否则直接输出1和当前下标加一
当奇数出现两个，直接输出2和数组的值加一和当前下标值加一即可

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<string>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
#include<fstream>
#include<cmath>
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
#define Set(a) memset(a,0,sizeof(a))
#define F(i,a,b) for(register int i=a,i##end=b;i<=i##end;++i)
#define UF(i,a,b) for(register int i=a,i##end=b;i>=i##end;--i)
#define openf(a) freopen(#a".in","r",stdin);freopen(#a".out","w",stdout)
#define re register
#define ri re int
#define il inline
#define INF 0x3f3f3f3f
#define MOD 100000000
#define debug() printf("Tairitsu Go PM!\n")
const int mod = 1e9 + 7;
template<typename T> inline T rd(T& x)
{
	T f = 1; x = 0; char c = getchar();
	for (; !isdigit(c); c = getchar()) if (c == '-') f = -1;
	for (; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (T)(c - '0');
	x *= f;
	return x;
}
ll rd() { ll x; rd(x); return x; }
inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
const int inf = 1 << 30;
int main() {
	int t = rd();
	for (int i = 0; i < t; i++) {
		int n = rd();
		vector<int> curr, currmodtwo;
		int res = 0;
		for (int j = 0; j < n; j++) {
			int a = rd();
			curr.push_back(a);
		}
		if (n == 1) {
			if (curr[0] % 2 == 1)
				cout << -1 << endl;
			else {
				cout << 1 << endl;
				cout << 1 << endl;
			}
		}
		else {
			bool flag = false;
			for (int i = 0; i < curr.size(); i++) {
				if (curr[i] % 2 == 0) {
					cout << 1 << endl;
					cout << i + 1 << endl;
					flag = true;
					break;
				}
			}
			if (flag)
				flag = false;
			else {
				for (int i = 0; i < curr.size(); i++) {
					if (curr[i] % 2 == 1) {
						currmodtwo.push_back(i);
						if (currmodtwo.size() == 2) {
							cout << 2 << endl;
							cout << currmodtwo[0] + 1 << ' ' << currmodtwo[1] + 1 << endl;
							break;
						}
					}
				}
			}
		}
	}
}